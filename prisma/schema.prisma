generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FORMATOR
  PREMIUM
  NORMAL
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  image     String?
  role      UserRole @default(NORMAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles    Article[]
  videos      Video[]
  formations  Formation[]
  purchases   Purchase[]
  history     History[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles    Article[]
  videos      Video[]
  formations  Formation[]
}

model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  slug        String   @unique
  imageUrl    String?
  isPremium   Boolean  @default(false)
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.ObjectId
  purchases   Purchase[]
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  videoUrl    String
  coverImage  String
  slug        String   @unique
  isPremium   Boolean  @default(false)
  price       Float?
  duration    Float?   // Durée en minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String     @db.ObjectId
  formations  VideoFormation[]
  purchases   Purchase[]
  history     History[]
}

model Formation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  slug        String    @unique
  imageUrl    String
  isPremium   Boolean   @default(false)
  price       Float?
  duration    Float?    // Durée totale en minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  videos      VideoFormation[]
  purchases   Purchase[]
  history     History[]
}

model VideoFormation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  order       Int
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  formation   Formation @relation(fields: [formationId], references: [id])
  formationId String    @db.ObjectId
  video       Video     @relation(fields: [videoId], references: [id])
  videoId     String    @db.ObjectId

  @@unique([formationId, videoId])
  @@unique([formationId, order])
}

model Purchase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // "article", "video", ou "formation"
  itemId      String   @db.ObjectId
  userId      String   @db.ObjectId
  price       Float
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  article     Article? @relation(fields: [itemId], references: [id])
  video       Video?   @relation(fields: [itemId], references: [id])
  formation   Formation? @relation(fields: [itemId], references: [id])

  @@unique([userId, type, itemId])
}

model Todo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  priority    String   // 'HIGH' | 'MEDIUM' | 'LOW'
  status      String   // 'PLANNED' | 'IN_PROGRESS' | 'COMPLETED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model History {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  type        String   // "video" ou "formation"
  itemId      String   @db.ObjectId
  timestamp   Float    // Position en secondes
  duration    Float?   // Durée en minutes
  lastViewedAt DateTime

  user        User     @relation(fields: [userId], references: [id])
  video       Video?   @relation(fields: [itemId], references: [id])
  formation   Formation? @relation(fields: [itemId], references: [id])

  @@unique([userId, type, itemId])
  @@index([userId, lastViewedAt])
} 